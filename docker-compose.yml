services:
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: backend
    restart: always
    ports:
      - 8000:8000
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgresprod
      - POSTGRES_PORT=5432
      - POSTGRES_DB=app
      - JWT_SECRET_KEY=your_super_secret_key_for_jwt_tokens
      - TZ=Europe/Moscow
    volumes:
      - ./back/static:/app/static
    networks:
      - app-network
    depends_on:
      - postgresprod

  frontend:
    build:
      context: ./asd
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    environment:
      - MODE=production
      - TZ=Europe/Moscow
    networks:
      - app-network

  postgresprod:
    image: postgres:16-alpine
    container_name: postgresprod
    hostname: postgresprod
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: Europe/Moscow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  # PostgreSQL metrics exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    hostname: postgres-exporter
    restart: always
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgresprod:5432/app?sslmode=disable"
      TZ: Europe/Moscow
    networks:
      - app-network
    depends_on:
      - postgresprod

  # Database management tool
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
      - TZ=Europe/Moscow
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - app-network
    depends_on:
      - postgresprod

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Redis metrics exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    hostname: redis-exporter
    restart: always
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - TZ=Europe/Moscow
    networks:
      - app-network
    depends_on:
      - redis

  prometheus:
    image: prom/prometheus:v2.51.1
    container_name: prometheus
    hostname: prometheus
    restart: always
    environment:
      - TZ=Europe/Moscow
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - app-network

  # Monitoring tool
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - TZ=Europe/Moscow
    ports:
      - "3002:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/prometheus_ds.yml:/etc/grafana/provisioning/datasources/prometheus_ds.yml
      - ./infrastructure/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/grafana/grafana.ini:/etc/grafana/grafana.ini

    depends_on:
      - prometheus
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=Europe/Moscow
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/fullchain.pem:/etc/nginx/fullchain.pem
      - ./nginx/privkey.pem:/etc/nginx/privkey.pem
    networks:
      - app-network
    depends_on:
      - backend
      - frontend

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    container_name: exporter
    hostname: exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - 9100:9100
    restart: always
    networks:
      - app-network

volumes:
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local
  grafana-data:
    driver: local
  redis_data:
    driver: local
networks:
  app-network:
    driver: bridge
